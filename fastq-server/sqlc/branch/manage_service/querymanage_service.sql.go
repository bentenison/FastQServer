// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: querymanage_service.sql

package manage_service

import (
	"context"
	"database/sql"
	"time"
)

const addbranch = `-- name: Addbranch :execresult
insert into manage_service (
        id,
        name,
        code,
        prefix,
        number_starts,
        number_ends,
        hide,
        show_display,
        description,
        start_time,
        end_time,
        default_time,
        workflow,
        branch_code,
        branch_name,
        company_code,
        company_name,
        created_at,
        updated_at,
        updated_by
    )
values(
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type AddbranchParams struct {
	ID           string
	Name         sql.NullString
	Code         string
	Prefix       sql.NullString
	NumberStarts sql.NullInt32
	NumberEnds   sql.NullInt32
	Hide         sql.NullBool
	ShowDisplay  sql.NullBool
	Description  sql.NullString
	StartTime    sql.NullTime
	EndTime      sql.NullTime
	DefaultTime  sql.NullInt32
	Workflow     sql.NullString
	BranchCode   string
	BranchName   sql.NullString
	CompanyCode  string
	CompanyName  sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
	UpdatedBy    sql.NullString
}

func (q *Queries) Addbranch(ctx context.Context, arg AddbranchParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addbranch,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.Prefix,
		arg.NumberStarts,
		arg.NumberEnds,
		arg.Hide,
		arg.ShowDisplay,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.DefaultTime,
		arg.Workflow,
		arg.BranchCode,
		arg.BranchName,
		arg.CompanyCode,
		arg.CompanyName,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const deleteBranch = `-- name: DeleteBranch :execresult
delete from manage_service
where id = ?
`

func (q *Queries) DeleteBranch(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteBranch, id)
}

const getAllServices = `-- name: GetAllServices :many
select id, name, code, prefix, number_starts, number_ends, hide, show_display, description, start_time, end_time, default_time, workflow, branch_code, branch_name, company_code, company_name, updated_at, created_at, updated_by
from manage_service
where company_code = ?
`

func (q *Queries) GetAllServices(ctx context.Context, companyCode string) ([]ManageService, error) {
	rows, err := q.db.QueryContext(ctx, getAllServices, companyCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManageService
	for rows.Next() {
		var i ManageService
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Prefix,
			&i.NumberStarts,
			&i.NumberEnds,
			&i.Hide,
			&i.ShowDisplay,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.DefaultTime,
			&i.Workflow,
			&i.BranchCode,
			&i.BranchName,
			&i.CompanyCode,
			&i.CompanyName,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranch = `-- name: GetBranch :one
select id, name, code, prefix, number_starts, number_ends, hide, show_display, description, start_time, end_time, default_time, workflow, branch_code, branch_name, company_code, company_name, updated_at, created_at, updated_by
from manage_service
where id = ?
    and company_code = ?
`

type GetBranchParams struct {
	ID          string
	CompanyCode string
}

func (q *Queries) GetBranch(ctx context.Context, arg GetBranchParams) (ManageService, error) {
	row := q.db.QueryRowContext(ctx, getBranch, arg.ID, arg.CompanyCode)
	var i ManageService
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Prefix,
		&i.NumberStarts,
		&i.NumberEnds,
		&i.Hide,
		&i.ShowDisplay,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.DefaultTime,
		&i.Workflow,
		&i.BranchCode,
		&i.BranchName,
		&i.CompanyCode,
		&i.CompanyName,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const updateService = `-- name: UpdateService :exec
update manage_service
set name = ?,
    code = ?,
    prefix = ?,
    number_starts = ?,
    number_ends = ?,
    hide = ?,
    show_display = ?,
    start_time = ?,
    end_time = ?,
    default_time = ?,
    workflow = ?,
    number_ends = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateServiceParams struct {
	Name         sql.NullString
	Code         string
	Prefix       sql.NullString
	NumberStarts sql.NullInt32
	NumberEnds   sql.NullInt32
	Hide         sql.NullBool
	ShowDisplay  sql.NullBool
	StartTime    sql.NullTime
	EndTime      sql.NullTime
	DefaultTime  sql.NullInt32
	Workflow     sql.NullString
	NumberEnds_2 sql.NullInt32
	UpdatedAt    time.Time
	UpdatedBy    sql.NullString
	ID           string
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) error {
	_, err := q.db.ExecContext(ctx, updateService,
		arg.Name,
		arg.Code,
		arg.Prefix,
		arg.NumberStarts,
		arg.NumberEnds,
		arg.Hide,
		arg.ShowDisplay,
		arg.StartTime,
		arg.EndTime,
		arg.DefaultTime,
		arg.Workflow,
		arg.NumberEnds_2,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateServiceDefaultTime = `-- name: UpdateServiceDefaultTime :exec
update manage_service
set default_time = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateServiceDefaultTimeParams struct {
	DefaultTime sql.NullInt32
	UpdatedAt   time.Time
	UpdatedBy   sql.NullString
	ID          string
}

func (q *Queries) UpdateServiceDefaultTime(ctx context.Context, arg UpdateServiceDefaultTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceDefaultTime,
		arg.DefaultTime,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateServiceEndTime = `-- name: UpdateServiceEndTime :exec
update manage_service
set end_time = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateServiceEndTimeParams struct {
	EndTime   sql.NullTime
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateServiceEndTime(ctx context.Context, arg UpdateServiceEndTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceEndTime,
		arg.EndTime,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateServiceName = `-- name: UpdateServiceName :exec
update manage_service
set name = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateServiceNameParams struct {
	Name      sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateServiceName(ctx context.Context, arg UpdateServiceNameParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceName,
		arg.Name,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateServiceNumberStart = `-- name: UpdateServiceNumberStart :exec
update manage_service
set number_starts = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateServiceNumberStartParams struct {
	NumberStarts sql.NullInt32
	UpdatedAt    time.Time
	UpdatedBy    sql.NullString
	ID           string
}

func (q *Queries) UpdateServiceNumberStart(ctx context.Context, arg UpdateServiceNumberStartParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceNumberStart,
		arg.NumberStarts,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateServicePrefix = `-- name: UpdateServicePrefix :exec
update manage_service
set prefix = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateServicePrefixParams struct {
	Prefix    sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateServicePrefix(ctx context.Context, arg UpdateServicePrefixParams) error {
	_, err := q.db.ExecContext(ctx, updateServicePrefix,
		arg.Prefix,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateServiceStartTime = `-- name: UpdateServiceStartTime :exec
update manage_service
set start_time = ?,
    updated_at = ?,
    updated_by = ?
where code = ?
`

type UpdateServiceStartTimeParams struct {
	StartTime sql.NullTime
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	Code      string
}

func (q *Queries) UpdateServiceStartTime(ctx context.Context, arg UpdateServiceStartTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceStartTime,
		arg.StartTime,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}
