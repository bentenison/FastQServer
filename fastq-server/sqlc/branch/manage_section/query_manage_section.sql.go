// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query_manage_section.sql

package manage_section

import (
	"context"
	"database/sql"
	"time"
)

const addSection = `-- name: AddSection :execresult
insert into manage_section (
        id,
        bench_wait,
        bench_process,
        description,
        branch_code,
        brach_name,
        company_code,
        company_name,
        created_at,
        created_by,
        updated_at,
        updated_by
    )
values(
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type AddSectionParams struct {
	ID           string
	BenchWait    sql.NullInt32
	BenchProcess sql.NullInt32
	Description  sql.NullString
	BranchCode   string
	BrachName    sql.NullString
	CompanyCode  string
	CompanyName  sql.NullString
	CreatedAt    time.Time
	CreatedBy    sql.NullString
	UpdatedAt    time.Time
	UpdatedBy    sql.NullString
}

func (q *Queries) AddSection(ctx context.Context, arg AddSectionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addSection,
		arg.ID,
		arg.BenchWait,
		arg.BenchProcess,
		arg.Description,
		arg.BranchCode,
		arg.BrachName,
		arg.CompanyCode,
		arg.CompanyName,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const deleteSection = `-- name: DeleteSection :execresult
delete from manage_section
where id = ?
`

func (q *Queries) DeleteSection(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSection, id)
}

const getAllSections = `-- name: GetAllSections :many
select id, name, bench_wait, bench_process, description, created_at, updated_at, created_by, updated_by, company_code, branch_code, company_name, brach_name
from manage_section
where company_code = ?
`

func (q *Queries) GetAllSections(ctx context.Context, companyCode string) ([]ManageSection, error) {
	rows, err := q.db.QueryContext(ctx, getAllSections, companyCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManageSection
	for rows.Next() {
		var i ManageSection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BenchWait,
			&i.BenchProcess,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CompanyCode,
			&i.BranchCode,
			&i.CompanyName,
			&i.BrachName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSection = `-- name: GetSection :one
select id, name, bench_wait, bench_process, description, created_at, updated_at, created_by, updated_by, company_code, branch_code, company_name, brach_name
from manage_section
where id = ?
    and company_code = ?
`

type GetSectionParams struct {
	ID          string
	CompanyCode string
}

func (q *Queries) GetSection(ctx context.Context, arg GetSectionParams) (ManageSection, error) {
	row := q.db.QueryRowContext(ctx, getSection, arg.ID, arg.CompanyCode)
	var i ManageSection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BenchWait,
		&i.BenchProcess,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CompanyCode,
		&i.BranchCode,
		&i.CompanyName,
		&i.BrachName,
	)
	return i, err
}

const updateSection = `-- name: UpdateSection :exec
update manage_section
set name = ?,
    bench_wait=?,
    bench_process=?,
    description=?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateSectionParams struct {
	Name         sql.NullString
	BenchWait    sql.NullInt32
	BenchProcess sql.NullInt32
	Description  sql.NullString
	UpdatedAt    time.Time
	UpdatedBy    sql.NullString
	ID           string
}

func (q *Queries) UpdateSection(ctx context.Context, arg UpdateSectionParams) error {
	_, err := q.db.ExecContext(ctx, updateSection,
		arg.Name,
		arg.BenchWait,
		arg.BenchProcess,
		arg.Description,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateSectionDescription = `-- name: UpdateSectionDescription :exec
update manage_section
set description = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateSectionDescriptionParams struct {
	Description sql.NullString
	UpdatedAt   time.Time
	UpdatedBy   sql.NullString
	ID          string
}

func (q *Queries) UpdateSectionDescription(ctx context.Context, arg UpdateSectionDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateSectionDescription,
		arg.Description,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateSectionProcess = `-- name: UpdateSectionProcess :exec
update manage_section
set bench_process = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateSectionProcessParams struct {
	BenchProcess sql.NullInt32
	UpdatedAt    time.Time
	UpdatedBy    sql.NullString
	ID           string
}

func (q *Queries) UpdateSectionProcess(ctx context.Context, arg UpdateSectionProcessParams) error {
	_, err := q.db.ExecContext(ctx, updateSectionProcess,
		arg.BenchProcess,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateSectionWait = `-- name: UpdateSectionWait :exec
update manage_section
set bench_wait = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateSectionWaitParams struct {
	BenchWait sql.NullInt32
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateSectionWait(ctx context.Context, arg UpdateSectionWaitParams) error {
	_, err := q.db.ExecContext(ctx, updateSectionWait,
		arg.BenchWait,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
