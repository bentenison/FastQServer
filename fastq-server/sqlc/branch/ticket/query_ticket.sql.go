// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query_ticket.sql

package ticket

import (
	"context"
	"database/sql"
)

const addTicket = `-- name: AddTicket :execresult
insert into ticket (
        id,
        service,
        counter_id,
        ticket_status,
        transfered_to,
        transfered_by,
        ticket_number,
        started_serving_at,
        end_serving_at,
        ticket_name,
        branch_code,
        branch_name,
        company_code,
        company_name,
        created_at,
        updated_at,
        updated_by
    )
values(
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type AddTicketParams struct {
	ID               string
	Service          sql.NullString
	CounterID        sql.NullString
	TicketStatus     sql.NullBool
	TransferedTo     sql.NullString
	TransferedBy     sql.NullString
	TicketNumber     sql.NullString
	StartedServingAt sql.NullTime
	EndServingAt     sql.NullTime
	TicketName       sql.NullString
	BranchCode       string
	BranchName       sql.NullString
	CompanyCode      string
	CompanyName      sql.NullString
	CreatedAt        sql.NullTime
	UpdatedAt        sql.NullTime
	UpdatedBy        sql.NullString
}

func (q *Queries) AddTicket(ctx context.Context, arg AddTicketParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addTicket,
		arg.ID,
		arg.Service,
		arg.CounterID,
		arg.TicketStatus,
		arg.TransferedTo,
		arg.TransferedBy,
		arg.TicketNumber,
		arg.StartedServingAt,
		arg.EndServingAt,
		arg.TicketName,
		arg.BranchCode,
		arg.BranchName,
		arg.CompanyCode,
		arg.CompanyName,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const deleteSection = `-- name: DeleteSection :execresult
delete from ticket
where id = ?
`

func (q *Queries) DeleteSection(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSection, id)
}

const getAllTicketsForDay = `-- name: GetAllTicketsForDay :many
select id, service, ticket_status, counter_id, transfered_to, transfered_by, customer_id, ticket_number, created_at, updated_at, updated_by, started_serving_at, end_serving_at, ticket_name, company_name, company_code, branch_code, branch_name
from ticket
where company_code = ?
    and branch_code = ?
    and date(created_at) = ?
`

type GetAllTicketsForDayParams struct {
	CompanyCode string
	BranchCode  string
	CreatedAt   sql.NullTime
}

func (q *Queries) GetAllTicketsForDay(ctx context.Context, arg GetAllTicketsForDayParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getAllTicketsForDay, arg.CompanyCode, arg.BranchCode, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Service,
			&i.TicketStatus,
			&i.CounterID,
			&i.TransferedTo,
			&i.TransferedBy,
			&i.CustomerID,
			&i.TicketNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.StartedServingAt,
			&i.EndServingAt,
			&i.TicketName,
			&i.CompanyName,
			&i.CompanyCode,
			&i.BranchCode,
			&i.BranchName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicket = `-- name: GetTicket :one
select id, service, ticket_status, counter_id, transfered_to, transfered_by, customer_id, ticket_number, created_at, updated_at, updated_by, started_serving_at, end_serving_at, ticket_name, company_name, company_code, branch_code, branch_name
from ticket
where id = ?
    and company_code = ?
    and branch_code = ?
`

type GetTicketParams struct {
	ID          string
	CompanyCode string
	BranchCode  string
}

func (q *Queries) GetTicket(ctx context.Context, arg GetTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicket, arg.ID, arg.CompanyCode, arg.BranchCode)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Service,
		&i.TicketStatus,
		&i.CounterID,
		&i.TransferedTo,
		&i.TransferedBy,
		&i.CustomerID,
		&i.TicketNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.StartedServingAt,
		&i.EndServingAt,
		&i.TicketName,
		&i.CompanyName,
		&i.CompanyCode,
		&i.BranchCode,
		&i.BranchName,
	)
	return i, err
}

const getTicketsByBranch = `-- name: GetTicketsByBranch :many
select id, service, ticket_status, counter_id, transfered_to, transfered_by, customer_id, ticket_number, created_at, updated_at, updated_by, started_serving_at, end_serving_at, ticket_name, company_name, company_code, branch_code, branch_name
from ticket
where company_code = ?
    and branch_code = ?
`

type GetTicketsByBranchParams struct {
	CompanyCode string
	BranchCode  string
}

func (q *Queries) GetTicketsByBranch(ctx context.Context, arg GetTicketsByBranchParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getTicketsByBranch, arg.CompanyCode, arg.BranchCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Service,
			&i.TicketStatus,
			&i.CounterID,
			&i.TransferedTo,
			&i.TransferedBy,
			&i.CustomerID,
			&i.TicketNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.StartedServingAt,
			&i.EndServingAt,
			&i.TicketName,
			&i.CompanyName,
			&i.CompanyCode,
			&i.BranchCode,
			&i.BranchName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketsByStatus = `-- name: GetTicketsByStatus :many
select id, service, ticket_status, counter_id, transfered_to, transfered_by, customer_id, ticket_number, created_at, updated_at, updated_by, started_serving_at, end_serving_at, ticket_name, company_name, company_code, branch_code, branch_name
from ticket
where company_code = ?
    and branch_code = ?
    and ticket_status = ?
`

type GetTicketsByStatusParams struct {
	CompanyCode  string
	BranchCode   string
	TicketStatus sql.NullBool
}

func (q *Queries) GetTicketsByStatus(ctx context.Context, arg GetTicketsByStatusParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getTicketsByStatus, arg.CompanyCode, arg.BranchCode, arg.TicketStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Service,
			&i.TicketStatus,
			&i.CounterID,
			&i.TransferedTo,
			&i.TransferedBy,
			&i.CustomerID,
			&i.TicketNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.StartedServingAt,
			&i.EndServingAt,
			&i.TicketName,
			&i.CompanyName,
			&i.CompanyCode,
			&i.BranchCode,
			&i.BranchName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketsByTransfer = `-- name: GetTicketsByTransfer :many
select id, service, ticket_status, counter_id, transfered_to, transfered_by, customer_id, ticket_number, created_at, updated_at, updated_by, started_serving_at, end_serving_at, ticket_name, company_name, company_code, branch_code, branch_name
from ticket
where company_code = ?
    and branch_code = ?
    and transfered_to = ?
`

type GetTicketsByTransferParams struct {
	CompanyCode  string
	BranchCode   string
	TransferedTo sql.NullString
}

func (q *Queries) GetTicketsByTransfer(ctx context.Context, arg GetTicketsByTransferParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getTicketsByTransfer, arg.CompanyCode, arg.BranchCode, arg.TransferedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Service,
			&i.TicketStatus,
			&i.CounterID,
			&i.TransferedTo,
			&i.TransferedBy,
			&i.CustomerID,
			&i.TicketNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.StartedServingAt,
			&i.EndServingAt,
			&i.TicketName,
			&i.CompanyName,
			&i.CompanyCode,
			&i.BranchCode,
			&i.BranchName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketsByUser = `-- name: GetTicketsByUser :many
select id, service, ticket_status, counter_id, transfered_to, transfered_by, customer_id, ticket_number, created_at, updated_at, updated_by, started_serving_at, end_serving_at, ticket_name, company_name, company_code, branch_code, branch_name
from ticket
where company_code = ?
    and branch_code = ?
    and counter_id = ?
`

type GetTicketsByUserParams struct {
	CompanyCode string
	BranchCode  string
	CounterID   sql.NullString
}

func (q *Queries) GetTicketsByUser(ctx context.Context, arg GetTicketsByUserParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getTicketsByUser, arg.CompanyCode, arg.BranchCode, arg.CounterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Service,
			&i.TicketStatus,
			&i.CounterID,
			&i.TransferedTo,
			&i.TransferedBy,
			&i.CustomerID,
			&i.TicketNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.StartedServingAt,
			&i.EndServingAt,
			&i.TicketName,
			&i.CompanyName,
			&i.CompanyCode,
			&i.BranchCode,
			&i.BranchName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicketStartTime = `-- name: UpdateTicketStartTime :exec
update ticket
set started_serving_at = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateTicketStartTimeParams struct {
	StartedServingAt sql.NullTime
	UpdatedAt        sql.NullTime
	UpdatedBy        sql.NullString
	ID               string
}

func (q *Queries) UpdateTicketStartTime(ctx context.Context, arg UpdateTicketStartTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateTicketStartTime,
		arg.StartedServingAt,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateTicketStatus = `-- name: UpdateTicketStatus :exec
update ticket
set ticket_status = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateTicketStatusParams struct {
	TicketStatus sql.NullBool
	UpdatedAt    sql.NullTime
	UpdatedBy    sql.NullString
	ID           string
}

func (q *Queries) UpdateTicketStatus(ctx context.Context, arg UpdateTicketStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTicketStatus,
		arg.TicketStatus,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateTicketTransferedTo = `-- name: UpdateTicketTransferedTo :exec
update ticket
set transfered_to = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateTicketTransferedToParams struct {
	TransferedTo sql.NullString
	UpdatedAt    sql.NullTime
	UpdatedBy    sql.NullString
	ID           string
}

func (q *Queries) UpdateTicketTransferedTo(ctx context.Context, arg UpdateTicketTransferedToParams) error {
	_, err := q.db.ExecContext(ctx, updateTicketTransferedTo,
		arg.TransferedTo,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateTicketUser = `-- name: UpdateTicketUser :exec
update ticket
set counter_id = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateTicketUserParams struct {
	CounterID sql.NullString
	UpdatedAt sql.NullTime
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateTicketUser(ctx context.Context, arg UpdateTicketUserParams) error {
	_, err := q.db.ExecContext(ctx, updateTicketUser,
		arg.CounterID,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
