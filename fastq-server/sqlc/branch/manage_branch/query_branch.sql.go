// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query_branch.sql

package manage_branch

import (
	"context"
	"database/sql"
	"time"
)

const addbranch = `-- name: Addbranch :execresult
insert into manage_branch (
        id,
        name,
        code,
        company_code,
        license,
        services,
        address,
        phone,
        license_key,
        check_in_url,
        ticket_page_url,
        display_url,
        created_at,
        updated_at,
        updated_by
    )
values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type AddbranchParams struct {
	ID            string
	Name          sql.NullString
	Code          string
	CompanyCode   string
	License       sql.NullString
	Services      sql.NullString
	Address       sql.NullString
	Phone         sql.NullString
	LicenseKey    sql.NullString
	CheckInUrl    sql.NullString
	TicketPageUrl sql.NullString
	DisplayUrl    sql.NullString
	CreatedAt     time.Time
	UpdatedAt     time.Time
	UpdatedBy     sql.NullString
}

func (q *Queries) Addbranch(ctx context.Context, arg AddbranchParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addbranch,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.CompanyCode,
		arg.License,
		arg.Services,
		arg.Address,
		arg.Phone,
		arg.LicenseKey,
		arg.CheckInUrl,
		arg.TicketPageUrl,
		arg.DisplayUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const deleteBranch = `-- name: DeleteBranch :execresult
delete from manage_branch
where code = ?
`

func (q *Queries) DeleteBranch(ctx context.Context, code string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteBranch, code)
}

const getAllBranches = `-- name: GetAllBranches :many
select id, code, name, license, services, address, phone, license_key, check_in_url, ticket_page_url, display_url, company_code, created_at, created_by, updated_at, updated_by, printer_details
from manage_branch
where company_code = ?
`

func (q *Queries) GetAllBranches(ctx context.Context, companyCode string) ([]ManageBranch, error) {
	rows, err := q.db.QueryContext(ctx, getAllBranches, companyCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManageBranch
	for rows.Next() {
		var i ManageBranch
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.License,
			&i.Services,
			&i.Address,
			&i.Phone,
			&i.LicenseKey,
			&i.CheckInUrl,
			&i.TicketPageUrl,
			&i.DisplayUrl,
			&i.CompanyCode,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.PrinterDetails,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranch = `-- name: GetBranch :one
select id, code, name, license, services, address, phone, license_key, check_in_url, ticket_page_url, display_url, company_code, created_at, created_by, updated_at, updated_by, printer_details
from manage_branch
where code = ?
    and company_code = ?
`

type GetBranchParams struct {
	Code        string
	CompanyCode string
}

func (q *Queries) GetBranch(ctx context.Context, arg GetBranchParams) (ManageBranch, error) {
	row := q.db.QueryRowContext(ctx, getBranch, arg.Code, arg.CompanyCode)
	var i ManageBranch
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.License,
		&i.Services,
		&i.Address,
		&i.Phone,
		&i.LicenseKey,
		&i.CheckInUrl,
		&i.TicketPageUrl,
		&i.DisplayUrl,
		&i.CompanyCode,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.PrinterDetails,
	)
	return i, err
}

const updateBranchAddress = `-- name: UpdateBranchAddress :exec
update manage_branch
set address = ?,
    updated_at = ?,
    updated_by = ?
where code = ?
`

type UpdateBranchAddressParams struct {
	Address   sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	Code      string
}

func (q *Queries) UpdateBranchAddress(ctx context.Context, arg UpdateBranchAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateBranchAddress,
		arg.Address,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}

const updateBranchLicense = `-- name: UpdateBranchLicense :exec
update manage_branch
set license = ?,
    updated_at = ?,
    updated_by = ?
where code = ?
`

type UpdateBranchLicenseParams struct {
	License   sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	Code      string
}

func (q *Queries) UpdateBranchLicense(ctx context.Context, arg UpdateBranchLicenseParams) error {
	_, err := q.db.ExecContext(ctx, updateBranchLicense,
		arg.License,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}

const updateBranchLicenseKey = `-- name: UpdateBranchLicenseKey :exec
update manage_branch
set license_key = ?,
    updated_at = ?,
    updated_by = ?
where code = ?
`

type UpdateBranchLicenseKeyParams struct {
	LicenseKey sql.NullString
	UpdatedAt  time.Time
	UpdatedBy  sql.NullString
	Code       string
}

func (q *Queries) UpdateBranchLicenseKey(ctx context.Context, arg UpdateBranchLicenseKeyParams) error {
	_, err := q.db.ExecContext(ctx, updateBranchLicenseKey,
		arg.LicenseKey,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}

const updateBranchName = `-- name: UpdateBranchName :exec
update manage_branch
set name = ?,
    updated_at = ?,
    updated_by = ?
where code = ?
`

type UpdateBranchNameParams struct {
	Name      sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	Code      string
}

func (q *Queries) UpdateBranchName(ctx context.Context, arg UpdateBranchNameParams) error {
	_, err := q.db.ExecContext(ctx, updateBranchName,
		arg.Name,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}

const updateBranchPhone = `-- name: UpdateBranchPhone :exec
update manage_branch
set phone = ?,
    updated_at = ?,
    updated_by = ?
where code = ?
`

type UpdateBranchPhoneParams struct {
	Phone     sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	Code      string
}

func (q *Queries) UpdateBranchPhone(ctx context.Context, arg UpdateBranchPhoneParams) error {
	_, err := q.db.ExecContext(ctx, updateBranchPhone,
		arg.Phone,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}

const updateBranchServices = `-- name: UpdateBranchServices :exec
update manage_branch
set services = ?,
    updated_at = ?,
    updated_by = ?
where code = ?
`

type UpdateBranchServicesParams struct {
	Services  sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	Code      string
}

func (q *Queries) UpdateBranchServices(ctx context.Context, arg UpdateBranchServicesParams) error {
	_, err := q.db.ExecContext(ctx, updateBranchServices,
		arg.Services,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}
