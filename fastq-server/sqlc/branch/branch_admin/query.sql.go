// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package branch_admin

import (
	"context"
	"database/sql"
	"time"
)

const addbranchAdmin = `-- name: AddbranchAdmin :execresult
insert into branch_admin (
        id,
        branch_name,
        branch_code,
        company_code,
        company_name,
        username,
        firstname,
        lastname,
        email,
        created_at,
        updated_at,
        updated_by
    )
values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type AddbranchAdminParams struct {
	ID          string
	BranchName  sql.NullString
	BranchCode  string
	CompanyCode string
	CompanyName sql.NullString
	Username    sql.NullString
	Firstname   sql.NullString
	Lastname    sql.NullString
	Email       sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
	UpdatedBy   sql.NullString
}

func (q *Queries) AddbranchAdmin(ctx context.Context, arg AddbranchAdminParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addbranchAdmin,
		arg.ID,
		arg.BranchName,
		arg.BranchCode,
		arg.CompanyCode,
		arg.CompanyName,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const getAllBranchAdmins = `-- name: GetAllBranchAdmins :many
select id, branch_name, branch_code, company_code, company_name, username, firstname, lastname, email, created_at, created_by, updated_at, updated_by
from branch_admin
where company_code = ?
`

func (q *Queries) GetAllBranchAdmins(ctx context.Context, companyCode string) ([]BranchAdmin, error) {
	rows, err := q.db.QueryContext(ctx, getAllBranchAdmins, companyCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BranchAdmin
	for rows.Next() {
		var i BranchAdmin
		if err := rows.Scan(
			&i.ID,
			&i.BranchName,
			&i.BranchCode,
			&i.CompanyCode,
			&i.CompanyName,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranchAdmin = `-- name: GetBranchAdmin :one
select id, branch_name, branch_code, company_code, company_name, username, firstname, lastname, email, created_at, created_by, updated_at, updated_by
from branch_admin
where branch_code = ?
    and company_code = ?
`

type GetBranchAdminParams struct {
	BranchCode  string
	CompanyCode string
}

func (q *Queries) GetBranchAdmin(ctx context.Context, arg GetBranchAdminParams) (BranchAdmin, error) {
	row := q.db.QueryRowContext(ctx, getBranchAdmin, arg.BranchCode, arg.CompanyCode)
	var i BranchAdmin
	err := row.Scan(
		&i.ID,
		&i.BranchName,
		&i.BranchCode,
		&i.CompanyCode,
		&i.CompanyName,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const updateBranchUserEmail = `-- name: UpdateBranchUserEmail :exec
update branch_admin
set email = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateBranchUserEmailParams struct {
	Email     sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateBranchUserEmail(ctx context.Context, arg UpdateBranchUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateBranchUserEmail,
		arg.Email,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateUserEmailByEmail = `-- name: UpdateUserEmailByEmail :exec
update branch_admin
set email = ?,
    updated_at = ?,
    updated_by = ?
where email = ?
`

type UpdateUserEmailByEmailParams struct {
	Email     sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	Email_2   sql.NullString
}

func (q *Queries) UpdateUserEmailByEmail(ctx context.Context, arg UpdateUserEmailByEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmailByEmail,
		arg.Email,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Email_2,
	)
	return err
}
