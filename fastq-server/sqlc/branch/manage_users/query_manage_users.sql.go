// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query_manage_users.sql

package manage_users

import (
	"context"
	"database/sql"
	"time"
)

const addUser = `-- name: AddUser :execresult
insert into manage_user (
        id,
        email,
        firstname,
        lastname,
        user_type,
        suspended,
        title,
        password,
        image_url,
        branch_code,
        branch_name,
        company_code,
        company_name,
        created_at,
        created_by,
        updated_at,
        updated_by
    )
values(
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type AddUserParams struct {
	ID          string
	Email       string
	Firstname   sql.NullString
	Lastname    sql.NullString
	UserType    sql.NullString
	Suspended   sql.NullBool
	Title       sql.NullString
	Password    sql.NullString
	ImageUrl    sql.NullString
	BranchCode  string
	BranchName  sql.NullString
	CompanyCode string
	CompanyName sql.NullString
	CreatedAt   time.Time
	CreatedBy   sql.NullString
	UpdatedAt   time.Time
	UpdatedBy   sql.NullString
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUser,
		arg.ID,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.UserType,
		arg.Suspended,
		arg.Title,
		arg.Password,
		arg.ImageUrl,
		arg.BranchCode,
		arg.BranchName,
		arg.CompanyCode,
		arg.CompanyName,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const deleteUser = `-- name: DeleteUser :execresult
delete from manage_user
where id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getAllUsers = `-- name: GetAllUsers :many
select id, email, firstname, lastname, created_at, user_type, suspended, branch_name, branch_code, company_name, company_code, title, password, image_url, updated_at, created_by, updated_by
from manage_user
where company_code = ?
    and branch_code = ?
`

type GetAllUsersParams struct {
	CompanyCode string
	BranchCode  string
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]ManageUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, arg.CompanyCode, arg.BranchCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManageUser
	for rows.Next() {
		var i ManageUser
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.CreatedAt,
			&i.UserType,
			&i.Suspended,
			&i.BranchName,
			&i.BranchCode,
			&i.CompanyName,
			&i.CompanyCode,
			&i.Title,
			&i.Password,
			&i.ImageUrl,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranch = `-- name: GetBranch :one
select id, email, firstname, lastname, created_at, user_type, suspended, branch_name, branch_code, company_name, company_code, title, password, image_url, updated_at, created_by, updated_by
from manage_user
where id = ?
    and company_code = ?
    and branch_code = ?
`

type GetBranchParams struct {
	ID          string
	CompanyCode string
	BranchCode  string
}

func (q *Queries) GetBranch(ctx context.Context, arg GetBranchParams) (ManageUser, error) {
	row := q.db.QueryRowContext(ctx, getBranch, arg.ID, arg.CompanyCode, arg.BranchCode)
	var i ManageUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.CreatedAt,
		&i.UserType,
		&i.Suspended,
		&i.BranchName,
		&i.BranchCode,
		&i.CompanyName,
		&i.CompanyCode,
		&i.Title,
		&i.Password,
		&i.ImageUrl,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
update manage_user
set email = ?,
    firstname = ?,
    lastname = ?,
    suspended = ?,
    image_url = ?,
    title = ?,
    user_type = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateUserParams struct {
	Email     string
	Firstname sql.NullString
	Lastname  sql.NullString
	Suspended sql.NullBool
	ImageUrl  sql.NullString
	Title     sql.NullString
	UserType  sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.Suspended,
		arg.ImageUrl,
		arg.Title,
		arg.UserType,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
update manage_user
set email = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateUserEmailParams struct {
	Email     string
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail,
		arg.Email,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateUserNames = `-- name: UpdateUserNames :exec
update manage_user
set firstname = ?,
    lastname = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateUserNamesParams struct {
	Firstname sql.NullString
	Lastname  sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateUserNames(ctx context.Context, arg UpdateUserNamesParams) error {
	_, err := q.db.ExecContext(ctx, updateUserNames,
		arg.Firstname,
		arg.Lastname,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
update manage_user
set password = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateUserPasswordParams struct {
	Password  sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword,
		arg.Password,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateUserSuspention = `-- name: UpdateUserSuspention :exec
update manage_user
set suspended = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateUserSuspentionParams struct {
	Suspended sql.NullBool
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateUserSuspention(ctx context.Context, arg UpdateUserSuspentionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSuspention,
		arg.Suspended,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
