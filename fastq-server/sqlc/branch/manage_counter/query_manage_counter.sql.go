// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query_manage_counter.sql

package manage_counter

import (
	"context"
	"database/sql"
	"time"
)

const addSection = `-- name: AddSection :execresult
insert into manage_counters (
        id,
        section,
        sub_section,
        user_id,
        counter_name,
        counter_number,
        override_fifo,
        transfer_q,
        asssign_user,
        assign_service,
        transfer_priority,
        cancel_q,
        transfer_finish,
        merge_section,
        end_q,
        branch_code,
        branch_name,
        company_code,
        company_name,
        created_at,
        created_by,
        updated_at,
        updated_by
    )
values(
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type AddSectionParams struct {
	ID               string
	Section          sql.NullString
	SubSection       sql.NullString
	UserID           string
	CounterName      sql.NullString
	CounterNumber    sql.NullString
	OverrideFifo     sql.NullBool
	TransferQ        sql.NullBool
	AsssignUser      sql.NullBool
	AssignService    sql.NullBool
	TransferPriority sql.NullBool
	CancelQ          sql.NullBool
	TransferFinish   sql.NullBool
	MergeSection     sql.NullBool
	EndQ             sql.NullBool
	BranchCode       string
	BranchName       sql.NullString
	CompanyCode      string
	CompanyName      sql.NullString
	CreatedAt        time.Time
	CreatedBy        sql.NullString
	UpdatedAt        time.Time
	UpdatedBy        sql.NullString
}

func (q *Queries) AddSection(ctx context.Context, arg AddSectionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addSection,
		arg.ID,
		arg.Section,
		arg.SubSection,
		arg.UserID,
		arg.CounterName,
		arg.CounterNumber,
		arg.OverrideFifo,
		arg.TransferQ,
		arg.AsssignUser,
		arg.AssignService,
		arg.TransferPriority,
		arg.CancelQ,
		arg.TransferFinish,
		arg.MergeSection,
		arg.EndQ,
		arg.BranchCode,
		arg.BranchName,
		arg.CompanyCode,
		arg.CompanyName,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const deleteCounter = `-- name: DeleteCounter :execresult
delete from manage_counters
where id = ?
`

func (q *Queries) DeleteCounter(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCounter, id)
}

const getAllCounters = `-- name: GetAllCounters :many
select id, section, sub_section, user_id, counter_number, counter_name, override_fifo, transfer_q, asssign_user, assign_service, transfer_priority, cancel_q, transfer_finish, merge_section, end_q, branch_code, branch_name, company_name, company_code, created_at, updated_at, created_by, updated_by
from manage_counters
where company_code = ?
`

func (q *Queries) GetAllCounters(ctx context.Context, companyCode string) ([]ManageCounter, error) {
	rows, err := q.db.QueryContext(ctx, getAllCounters, companyCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManageCounter
	for rows.Next() {
		var i ManageCounter
		if err := rows.Scan(
			&i.ID,
			&i.Section,
			&i.SubSection,
			&i.UserID,
			&i.CounterNumber,
			&i.CounterName,
			&i.OverrideFifo,
			&i.TransferQ,
			&i.AsssignUser,
			&i.AssignService,
			&i.TransferPriority,
			&i.CancelQ,
			&i.TransferFinish,
			&i.MergeSection,
			&i.EndQ,
			&i.BranchCode,
			&i.BranchName,
			&i.CompanyName,
			&i.CompanyCode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSection = `-- name: GetSection :one
select id, section, sub_section, user_id, counter_number, counter_name, override_fifo, transfer_q, asssign_user, assign_service, transfer_priority, cancel_q, transfer_finish, merge_section, end_q, branch_code, branch_name, company_name, company_code, created_at, updated_at, created_by, updated_by
from manage_counters
where id = ?
    and branch_code = ?
`

type GetSectionParams struct {
	ID         string
	BranchCode string
}

func (q *Queries) GetSection(ctx context.Context, arg GetSectionParams) (ManageCounter, error) {
	row := q.db.QueryRowContext(ctx, getSection, arg.ID, arg.BranchCode)
	var i ManageCounter
	err := row.Scan(
		&i.ID,
		&i.Section,
		&i.SubSection,
		&i.UserID,
		&i.CounterNumber,
		&i.CounterName,
		&i.OverrideFifo,
		&i.TransferQ,
		&i.AsssignUser,
		&i.AssignService,
		&i.TransferPriority,
		&i.CancelQ,
		&i.TransferFinish,
		&i.MergeSection,
		&i.EndQ,
		&i.BranchCode,
		&i.BranchName,
		&i.CompanyName,
		&i.CompanyCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateCounter = `-- name: UpdateCounter :exec
update manage_counters
set section = ?,
    sub_section = ?,
    user_id = ?,
    counter_number = ?,
    counter_name = ?,
    override_fifo = ?,
    transfer_q = ?,
    asssign_user = ?,
    assign_service = ?,
    transfer_priority = ?,
    transfer_finish = ?,
    cancel_q = ?,
    merge_section = ?,
    end_q = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateCounterParams struct {
	Section          sql.NullString
	SubSection       sql.NullString
	UserID           string
	CounterNumber    sql.NullString
	CounterName      sql.NullString
	OverrideFifo     sql.NullBool
	TransferQ        sql.NullBool
	AsssignUser      sql.NullBool
	AssignService    sql.NullBool
	TransferPriority sql.NullBool
	TransferFinish   sql.NullBool
	CancelQ          sql.NullBool
	MergeSection     sql.NullBool
	EndQ             sql.NullBool
	UpdatedAt        time.Time
	UpdatedBy        sql.NullString
	ID               string
}

func (q *Queries) UpdateCounter(ctx context.Context, arg UpdateCounterParams) error {
	_, err := q.db.ExecContext(ctx, updateCounter,
		arg.Section,
		arg.SubSection,
		arg.UserID,
		arg.CounterNumber,
		arg.CounterName,
		arg.OverrideFifo,
		arg.TransferQ,
		arg.AsssignUser,
		arg.AssignService,
		arg.TransferPriority,
		arg.TransferFinish,
		arg.CancelQ,
		arg.MergeSection,
		arg.EndQ,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateCounterName = `-- name: UpdateCounterName :exec
update manage_counters
set counter_name = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateCounterNameParams struct {
	CounterName sql.NullString
	UpdatedAt   time.Time
	UpdatedBy   sql.NullString
	ID          string
}

func (q *Queries) UpdateCounterName(ctx context.Context, arg UpdateCounterNameParams) error {
	_, err := q.db.ExecContext(ctx, updateCounterName,
		arg.CounterName,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateCounterNumber = `-- name: UpdateCounterNumber :exec
update manage_counters
set counter_number = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateCounterNumberParams struct {
	CounterNumber sql.NullString
	UpdatedAt     time.Time
	UpdatedBy     sql.NullString
	ID            string
}

func (q *Queries) UpdateCounterNumber(ctx context.Context, arg UpdateCounterNumberParams) error {
	_, err := q.db.ExecContext(ctx, updateCounterNumber,
		arg.CounterNumber,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateCounterSection = `-- name: UpdateCounterSection :exec
update manage_counters
set section = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateCounterSectionParams struct {
	Section   sql.NullString
	UpdatedAt time.Time
	UpdatedBy sql.NullString
	ID        string
}

func (q *Queries) UpdateCounterSection(ctx context.Context, arg UpdateCounterSectionParams) error {
	_, err := q.db.ExecContext(ctx, updateCounterSection,
		arg.Section,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateCounterSettings = `-- name: UpdateCounterSettings :exec
update manage_counters
set override_fifo = ?,
    transfer_q = ?,
    asssign_user = ?,
    assign_service = ?,
    transfer_priority = ?,
    transfer_finish = ?,
    cancel_q = ?,
    merge_section = ?,
    end_q = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateCounterSettingsParams struct {
	OverrideFifo     sql.NullBool
	TransferQ        sql.NullBool
	AsssignUser      sql.NullBool
	AssignService    sql.NullBool
	TransferPriority sql.NullBool
	TransferFinish   sql.NullBool
	CancelQ          sql.NullBool
	MergeSection     sql.NullBool
	EndQ             sql.NullBool
	UpdatedAt        time.Time
	UpdatedBy        sql.NullString
	ID               string
}

func (q *Queries) UpdateCounterSettings(ctx context.Context, arg UpdateCounterSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateCounterSettings,
		arg.OverrideFifo,
		arg.TransferQ,
		arg.AsssignUser,
		arg.AssignService,
		arg.TransferPriority,
		arg.TransferFinish,
		arg.CancelQ,
		arg.MergeSection,
		arg.EndQ,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}

const updateCounterSubSection = `-- name: UpdateCounterSubSection :exec
update manage_counters
set sub_section = ?,
    updated_at = ?,
    updated_by = ?
where id = ?
`

type UpdateCounterSubSectionParams struct {
	SubSection sql.NullString
	UpdatedAt  time.Time
	UpdatedBy  sql.NullString
	ID         string
}

func (q *Queries) UpdateCounterSubSection(ctx context.Context, arg UpdateCounterSubSectionParams) error {
	_, err := q.db.ExecContext(ctx, updateCounterSubSection,
		arg.SubSection,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
