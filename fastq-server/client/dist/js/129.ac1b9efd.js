"use strict";(self["webpackChunkfastq_client"]=self["webpackChunkfastq_client"]||[]).push([[129],{1857:function(t,e,a){a.r(e),a.d(e,{default:function(){return m}});var s=a(4145),r=a(4886),c=a(266),o=a(1713),i=function(){var t=this,e=t._self._c;return e("div",{staticClass:"container"},[e(o.Z,{staticClass:"d-flex align-center justify-center"},[e(c.Z,{attrs:{cols:"12",md:"12",lg:"12"}},[e("h2",{},[t._v(" Ticket Count by status")])]),t._l(t.queriedData,(function(a,i){return e(c.Z,{key:i,attrs:{cols:"12",md:"4",lg:"3"}},[e(s.Z,{attrs:{color:t.colors[Math.floor(3*Math.random())],elevation:"3"}},[e(r.EB,{staticClass:"white--text text-h2"},[t._v(t._s(a))]),e(r.Qq,{staticClass:"white--text text-h6"},[t._v(t._s(i))]),e(r.ZB,[e(o.Z)],1)],1)],1)})),e(c.Z,{attrs:{cols:"12",md:"12",lg:"12"}},[e("h2",{},[t._v(" Ticket Count by service")])]),t._l(t.ticketbyservice,(function(a,i){return e(c.Z,{key:i,attrs:{cols:"12",md:"4",lg:"3"}},[e(s.Z,{attrs:{color:t.colors[Math.floor(3*Math.random())],elevation:"3"}},[e(r.EB,{staticClass:"white--text text-h2"},[t._v(t._s(a))]),e(r.Qq,{staticClass:"white--text text-h6"},[t._v(t._s(i))]),e(r.ZB,[e(o.Z)],1)],1)],1)})),e(c.Z,{attrs:{cols:"12",md:"12",lg:"12"}},[e("h2",{},[t._v(" Tickets Served By User")])]),e(c.Z,{attrs:{cols:"12",md:"12",lg:"12"}},[e("DataTables",{attrs:{headers:t.tableheaders,items:t.userData}})],1),e(c.Z,{attrs:{cols:"12",md:"12",lg:"12"}},[e("h2",{},[t._v(" Active Time Of User Per Day")])]),e(c.Z,{attrs:{cols:"12",md:"12",lg:"12"}},[e("DataTables",{attrs:{headers:t.activeheaders,items:t.activeData}})],1)],2)],1)},n=[],l=a(6832),h=a(6154),u=a(7487),g={components:{TiimePickers:l.Z,DataTables:u.Z},data:()=>({headers:null,queriedData:null,ticketbyservice:null,colors:["#0097A7","#FF4081","#00C853"],avgWaitingTime:null,avgWaitingTimeByService:null,tableheaders:[{text:"ID",align:"start",sortable:!1,value:"id"},{text:"Service",value:"service"},{text:"TicketStatus",value:"ticket_status"},{text:"UserName",value:"user_name"},{text:"Actions",value:"actions",sortable:!1}],activeheaders:[{text:"UserName",align:"start",sortable:!1,value:"UserName"},{text:"ActiveTimeHours",value:"ActiveTimeHours"},{text:"ActiveTimeMinutes",value:"ActiveTimeMinutes"},{text:"ActiveTimeSeconds",value:"ActiveTimeSeconds"},{text:"FirstTicketTime",value:"FirstTicketTime"},{text:"LastTicketTime",value:"LastTicketTime"},{text:"ServingDate",value:"ServingDate"},{text:"Actions",value:"actions",sortable:!1}],counterTableData:[],userData:[],activeData:[]}),watch:{},methods:{async getTotalTicketsByService(){try{const t=await h.Z.get(`/report/tickets-by-service/${this.$store.state.Auth.user.company_code}`);this.ticketbyservice=t.data}catch(t){console.error("Error fetching data:",t)}},async getTicketsByStatus(){try{const t=await h.Z.get(`/report/tickets-by-status/${this.$store.state.Auth.user.company_code}`);this.handleQueryResponse(t),console.log("object",t.data)}catch(t){console.error("Error fetching data:",t)}},handleQueryResponse(t){t.data?(this.queriedData=t.data,this.showData=!0):console.error("Invalid response data structure")},async getTicketgetAverageServiceTimeByService(){try{const t=await h.Z.get(`/report/avg-service-time-by-service/${this.$store.state.Auth.user.company_code}`);console.log("object",t.data)}catch(t){console.error("Error fetching data:",t)}},async getTicketgetAverageWatingTimeByService(){try{const t=await h.Z.get(`/report/avg-waiting-time-by-service/${this.$store.state.Auth.user.company_code}`);console.log("object",t.data)}catch(t){console.error("Error fetching data:",t)}},async getTicketsByComanyBranch(){try{const t=await h.Z.get(`/report/tickets-by-company-branch/${this.$store.state.Auth.user.company_code}`);console.log("object company",t.data)}catch(t){console.error("Error fetching data:",t)}},async getTicketServedByCounter(){try{const t=await h.Z.get(`/report/tickets-served-by-counter/${this.$store.state.Auth.user.company_code}`);console.log("object served by counter",t.data)}catch(t){console.error("Error fetching data:",t)}},async getTicketswithUserInfo(){try{const t=await h.Z.get(`/report/tickets-with-user-info/${this.$store.state.Auth.user.company_code}`);this.userData=t.data,console.log("object with user info",t.data)}catch(t){console.error("Error fetching data:",t)}},async getTicketWithCounterInfo(){try{const t=await h.Z.get(`/report/tickets-with-counter-info/${this.$store.state.Auth.user.company_code}`);console.log("object with counter info",t.data)}catch(t){console.error("Error fetching data:",t)}},async getActiveTimePerDay(){try{const t=await h.Z.get(`/report/active-time-of-user-per-day/${this.$store.state.Auth.user.company_code}`);this.activeData=t.data,console.log("object active time of user per day",t.data)}catch(t){console.error("Error fetching data:",t)}},async getTicketCounterUserInfo(){try{const t=await h.Z.get(`/report/tickets-by-company-branch-counter-info/${this.$store.state.Auth.user.company_code}`);console.log("object",t.data)}catch(t){console.error("Error fetching data:",t)}}},created(){this.getTicketsByStatus(),this.getTotalTicketsByService(),this.getTicketgetAverageServiceTimeByService(),this.getTicketgetAverageWatingTimeByService(),this.getTicketServedByCounter(),this.getTicketsByComanyBranch(),this.getTicketServedByCounter(),this.getTicketswithUserInfo(),this.getTicketWithCounterInfo(),this.getActiveTimePerDay()}},v=g,d=a(1001),y=(0,d.Z)(v,i,n,!1,null,null,null),m=y.exports}}]);
//# sourceMappingURL=129.ac1b9efd.js.map